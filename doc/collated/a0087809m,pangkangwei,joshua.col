//@author: a0087809m,pangkangwei,joshua



	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanel.java
	 */

 *
 */
public class InputPanel {

	//default format for date
	protected final static SimpleDateFormat date_format = new SimpleDateFormat("dd/MM/yyyy");
	protected final static Font error_font = new Font("SanSerif", Font.ITALIC, 12);
	
	//inputPanelInput_PNLHost_FRM refers to the pop-up frame that holds this inputPanelInput_PNL
	protected JFrame inputPanelHost_FRM;
	
	protected JPanel inputPanelInput_PNL;
	protected JTextField inputPanelAmount_TF;
	protected JTextField inputPanelDD_TF;
	protected JTextField inputPanelMM_TF;
	protected JTextField inputPanelYYYY_TF;
	protected JTextField inputPanelCat1_TF;
	protected JTextField inputPanelCat2_TF;
	protected JTextField inputPanelDescription_TF;
	
	protected JLabel inputPanelAmount_LBL = new JLabel("Amount");
	protected JLabel inputPanelDate_LBL = new JLabel("Date");
	protected JLabel inputPanelCreateCat1_LBL = new JLabel("Create Category");
	protected JLabel inputPanelCreateCat2_LBL = new JLabel("Create Category");
	protected JLabel inputPanelDescription_LBL = new JLabel("Description");
	protected JLabel inputPanelError_LBL = new JLabel();
	protected String errorMsg = "";
	
	protected  AssetCatMgr assetCatMgr;
	protected  LiabilityCatMgr liabilityCatMgr;
	protected  IncomeCatMgr incomeCatMgr;
	protected  ExpenseCatMgr expenseCatMgr;
	protected  EntryMgr entryMgr;
	protected  HistoryMgr historyMgr;
	
	/**
	 * Create the panel.
	 */
	public InputPanel(JFrame hostFrame, EntryMgr entryMgr, HistoryMgr historyMgr) {
		
		//pass reference to the panel for checking and adding of transactions
		this.inputPanelHost_FRM = hostFrame;
		this.entryMgr = entryMgr;
		this.historyMgr = historyMgr;
		
		inputPanelInput_PNL = new JPanel(new MigLayout("", "[100,left]5[100]25[130,left]5[100]5[grow]", "[20]5[]5[30]5[50]10[50,grow,top]"));
		inputPanelInput_PNL.setSize(700,300);
		
		inputPanelInput_PNL.add(inputPanelAmount_LBL, "cell 0 0,alignx left");
		
		inputPanelAmount_TF = new JTextField();
		inputPanelAmount_TF.setColumns(10);
		inputPanelInput_PNL.add(inputPanelAmount_TF, "cell 1 0,growx");

		inputPanelInput_PNL.add(inputPanelDate_LBL, "cell 2 0,alignx left");
		
		inputPanelDD_TF = new JTextField();
		inputPanelDD_TF.setColumns(5);
		inputPanelInput_PNL.add(inputPanelDD_TF, "cell 3 0,growx");
		
		inputPanelMM_TF = new JTextField();
		inputPanelMM_TF.setColumns(5);
		inputPanelInput_PNL.add(inputPanelMM_TF, "cell 3 0,growx");
		
		inputPanelYYYY_TF = new JTextField();
		inputPanelInput_PNL.add(inputPanelYYYY_TF, "cell 4 0,");
		inputPanelYYYY_TF.setColumns(8);
		
		inputPanelInput_PNL.add(inputPanelCreateCat1_LBL, "cell 0 2,alignx left");
		
		inputPanelCat1_TF = new JTextField();
		inputPanelInput_PNL.add(inputPanelCat1_TF, "cell 1 2,growx");
		inputPanelCat1_TF.setColumns(10);
		
		inputPanelInput_PNL.add(inputPanelCreateCat2_LBL, "cell 2 2,alignx left");
		
		inputPanelCat2_TF = new JTextField();
		inputPanelInput_PNL.add(inputPanelCat2_TF, "cell 3 2,growx");
		inputPanelCat2_TF.setColumns(10);
		
		inputPanelInput_PNL.add(inputPanelDescription_LBL , "cell 0 3");
		
		inputPanelDescription_TF = new JTextField();
		inputPanelInput_PNL.add(inputPanelDescription_TF, "cell 1 3 4 1,grow");
		
		inputPanelError_LBL.setFont(error_font);
		inputPanelError_LBL.setForeground(Color.RED);
		inputPanelInput_PNL.add(inputPanelError_LBL, "cell 1 4 3 1,grow");
		
		resetFields();

	}
	
	/**
	 * For setting the 2 category managers specific to the inherited panel
	 * @param assetCatMgr
	 * @param incomeCatMgr
	 */
	public void setCatMgr(final AssetCatMgr assetCatMgr, final IncomeCatMgr incomeCatMgr){
		this.assetCatMgr = assetCatMgr;
		this.incomeCatMgr = incomeCatMgr;
	}
	
	/**
	 * For setting the 2 category managers specific to the inherited panel
	 * @param assetCatMgr
	 * @param expenseCatMgr
	 */
	public void setCatMgr(final AssetCatMgr assetCatMgr, final ExpenseCatMgr expenseCatMgr){
		this.assetCatMgr = assetCatMgr;
		this.expenseCatMgr = expenseCatMgr;
	}
	
	/**
	 * For setting the 2 category managers specific to the inherited panel
	 * @param liabilityCatMgr
	 * @param expenseCatMgr
	 */
	public void setCatMgr(final LiabilityCatMgr liabilityCatMgr, final ExpenseCatMgr expenseCatMgr){
		this.liabilityCatMgr = liabilityCatMgr;
		this.expenseCatMgr = expenseCatMgr;
	}
	
	/**
	 * For setting the 2 category managers specific to the inherited panel
	 * @param assetCatMgr
	 * @param liabilityCatMgr
	 */
	public void setCatMgr(final AssetCatMgr assetCatMgr, final LiabilityCatMgr liabilityCatMgr){
		this.assetCatMgr = assetCatMgr;
		this.liabilityCatMgr = liabilityCatMgr;
	}
	
	public JPanel getPanel(){
		return inputPanelInput_PNL;
	}
	
	/**
	 * Resets all input fields
	 */
	public void resetFields(){
		 
		inputPanelAmount_TF.setText("$$$");
		Date currentDate = new Date();
		String date = date_format.format(currentDate);
		StringTokenizer st = new StringTokenizer(date,"/");
		inputPanelDD_TF.setText(st.nextToken());
		inputPanelMM_TF.setText(st.nextToken());
		inputPanelYYYY_TF.setText(st.nextToken());
		inputPanelCat2_TF.setText("");
		inputPanelCat1_TF.setText("");
		inputPanelDescription_TF.setText("");
	}
	
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanel.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType0.java
	 */

 *
 */
public class InputPanelType0 extends InputPanel {

 public InputPanelType0(final JFrame hostFrame, final AssetCatMgr assetCatMgr, final IncomeCatMgr incomeCatMgr,
   final EntryMgr entryMgr, final HistoryMgr historyMgr) {
  
  super(hostFrame, entryMgr, historyMgr);
  setCatMgr(assetCatMgr, incomeCatMgr);
  
  inputPanelInput_PNL.setBackground(new Color(160, 190, 220));
  
  JLabel lblType = new JLabel("Asset Type");
  inputPanelInput_PNL.add(lblType, "cell 0 1,alignx left");
  
  //drop down menu for asset categories
  final JComboBox<String> assetTypeCB = new JComboBox<String>();
  for(String assetCat : assetCatMgr.getCategoryNameList())
   assetTypeCB.addItem(assetCat);
  assetTypeCB.addItem("New Category");
  inputPanelInput_PNL.add(assetTypeCB, "cell 1 1,growx");
  
  JLabel lblExpenseCategory = new JLabel("Income Category");
  inputPanelInput_PNL.add(lblExpenseCategory, "cell 2 1,alignx left");
  
  //drop down menu for income categories
  final JComboBox<String> incomeCatCB = new JComboBox<String>();
  for(String incomeCat : incomeCatMgr.getCategoryNameList())
   incomeCatCB.addItem(incomeCat);
  incomeCatCB.addItem("New Category");
  inputPanelInput_PNL.add(incomeCatCB, "cell 3 1,growx");
  
  JButton btnAddEntry = new JButton("Add Entry");
  btnAddEntry.addActionListener(new ActionListener() {
   
   //variables for storing user's inputs
   boolean pipePresent = false;
   int DD, MM, YYYY;
   double amount;
   String category1, category2, description;
   
   public void actionPerformed(ActionEvent e) {
    
    //check if amount is valid
    try{
     amount = Integer.parseInt(inputPanelAmount_TF.getText());
     if (amount < 0)
      throw new Exception();
    } catch (Exception exAmount){
     errorMsg += "Amount was not a valid number.<br>";
    }

    //Check if date is valid
    DD = Integer.parseInt(inputPanelDD_TF.getText());
    MM = Integer.parseInt(inputPanelMM_TF.getText());
    YYYY = Integer.parseInt(inputPanelYYYY_TF.getText());
    String formatString = "dd/MM/yyyy";
    String dateString = Integer.toString(DD) + "/" + Integer.toString(MM) + "/" + Integer.toString(YYYY);

    try {
     SimpleDateFormat format = new SimpleDateFormat(formatString);
     format.setLenient(false);
     format.parse(dateString);
    } catch (ParseException e1) {
     errorMsg += "Invalid date.<br>";
    } catch (IllegalArgumentException e2) {
     errorMsg += "Invalid date.<br>";
    }
     
    //process dd mm yyyy into date
    Date date = null;
    try {
     date = date_format.parse(dateString);
    } catch (ParseException e1) {
     errorMsg += "Unable to process date.<br>";
    }
    
    //check if date is before today
    Date today = new Date();
    if (today.before(date)){
     errorMsg += "Date given is in the future!.<br>";
    }
 
    //get asset category
    if (assetTypeCB.getSelectedIndex() == assetTypeCB.getItemCount()-1){
     category1 = inputPanelCat1_TF.getText();
     //check if new category is unique
     if (assetCatMgr.checkExisting(category1))
      errorMsg += "Asset Type already exists.<br>" +
        "Please try a different name.<br>";
     if(category1.indexOf("|") >= 0)
      pipePresent = true;
    }
    else {
     category1 = (String) assetTypeCB.getSelectedItem();
    }
    
    //get income category
    if (incomeCatCB.getSelectedIndex() == incomeCatCB.getItemCount()-1){
     category2 = inputPanelCat2_TF.getText();
     //check if new category is unique
     if (incomeCatMgr.checkExisting(category2))
      errorMsg += "Income category already exists.<br>" +
        "Please try a different name.<br>";
     if(category2.indexOf("|") >= 0)
      pipePresent = true;
    }
    else {
     category2 = (String) incomeCatCB.getSelectedItem();
    }
    
    description = inputPanelDescription_TF.getText();
    if(description.indexOf("|") >= 0)
     pipePresent = true;
    
    //check if pipes present
    if(pipePresent){
     errorMsg += "Pipe characters are not supported.<br>" +
       "So sorry about that!<br>";
    }
    
    //if any errors present, display errorMsg, reset errorMsg and boolean flags
    if (errorMsg != ""){
     errorMsg = "<html>" + errorMsg + "Please try again!" + "</html>"; //to wrap text
     inputPanelError_LBL.setText(errorMsg);
     errorMsg = "";
     pipePresent = false;
    }
    else {
     
     int id = 1 + entryMgr.getCurrentId();
     
     //update entryMgr
     entryMgr.addEntry(0, amount, date, category1, category2, description);
     
     //update assetCatmgr
     int assetType = assetTypeCB.getSelectedIndex();
     if (assetType == assetTypeCB.getItemCount()-1){
      assetCatMgr.addCategory(category1, amount);
     }
     else{
      assetCatMgr.addAmountToCategory(assetTypeCB.getItemAt(assetType), amount);
     }
     
     //update incomeCatMgr
     int incomeType = incomeCatCB.getSelectedIndex();
     if (incomeType == incomeCatCB.getItemCount()-1){
      incomeCatMgr.addCategory(category2, amount);
     }
     else{
      incomeCatMgr.addAmountToCategory(incomeCatCB.getItemAt(incomeType), amount);
     }
     
     //update historyMgr
     historyMgr.addLog(0, id, 0, amount, date, category1, category2, description);

     resetFields();
     
     hostFrame.dispose();
    }
   }
  });
  inputPanelInput_PNL.add(btnAddEntry, "cell 4 4");

 }
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType0.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType1.java
	 */

 *
 */
public class InputPanelType1 extends InputPanel {

	public InputPanelType1(final JFrame hostFrame, final AssetCatMgr assetCatMgr, final ExpenseCatMgr expenseCatMgr,
			final EntryMgr entryMgr, final HistoryMgr historyMgr) {
		
		super(hostFrame, entryMgr, historyMgr);
		setCatMgr(assetCatMgr, expenseCatMgr);
		
		inputPanelInput_PNL.setBackground(new Color(255, 200, 0));
		
		JLabel lblType = new JLabel("Asset Type");
		inputPanelInput_PNL.add(lblType, "cell 0 1,alignx left");
		
		//drop down menu for asset categories
		final JComboBox<String> assetTypeCB = new JComboBox<String>();
		for(String assetCat : assetCatMgr.getCategoryNameList())
			assetTypeCB.addItem(assetCat);
		assetTypeCB.addItem("New Category");
		inputPanelInput_PNL.add(assetTypeCB, "cell 1 1,growx");
		
		JLabel lblExpenseCategory = new JLabel("Expense Category");
		inputPanelInput_PNL.add(lblExpenseCategory, "cell 2 1,alignx left");
		
		//drop down menu for expense categories
		final JComboBox<String> expenseCatCB = new JComboBox<String>();
		for(String expenseCat : expenseCatMgr.getCategoryNameList())
			expenseCatCB.addItem(expenseCat);
		expenseCatCB.addItem("New Category");
		inputPanelInput_PNL.add(expenseCatCB, "cell 3 1,growx");
		
		JButton btnAddEntry = new JButton("Add Entry");
		btnAddEntry.addActionListener(new ActionListener() {
			
			//variables for storing user's inputs
			boolean pipePresent = false;
			int DD, MM, YYYY;
			double amount;
			String category1, category2, description;
			
			public void actionPerformed(ActionEvent e) {
				
				//check if amount is valid
				try{
					amount = Integer.parseInt(inputPanelAmount_TF.getText());
					if (amount < 0)
						throw new Exception();
				} catch (Exception exAmount){
					errorMsg += "Amount was not a valid number.<br>";
				}

				//Check if date is valid
				DD = Integer.parseInt(inputPanelDD_TF.getText());
				MM = Integer.parseInt(inputPanelMM_TF.getText());
				YYYY = Integer.parseInt(inputPanelYYYY_TF.getText());
				String formatString = "dd/MM/yyyy";
				String dateString = Integer.toString(DD) + "/" + Integer.toString(MM) + "/" + Integer.toString(YYYY);

				try {
					SimpleDateFormat format = new SimpleDateFormat(formatString);
					format.setLenient(false);
					format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Invalid date.<br>";
				} catch (IllegalArgumentException e2) {
					errorMsg += "Invalid date.<br>";
				}
					
				Date date = null;
				try {
					date = date_format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Unable to process date.<br>";
				}
				
				//check if date is before today
				Date today = new Date();
				if (today.before(date)){
					errorMsg += "Date given is in the future!.<br>";
				}
	
				//get asset category
				if (assetTypeCB.getSelectedIndex() == assetTypeCB.getItemCount()-1){
					//cannot deduct from new category (illegal)
					errorMsg += "Cannot deduct from a new category.<br>" +
								"You may register an income in the new category first or deduct from an existing category.<br>";
				}
				else {
					category1 = (String) assetTypeCB.getSelectedItem();
					//check if balance in category sufficient
					if(assetCatMgr.getAmount(category1) < amount){
						errorMsg += "Sorry, you do not have enough money in " + category1 + ".<br>" +
									"Please register an income in " + category1 + " or deduct from another category.<br>";
					}
				}
				//get expense category
				if (expenseCatCB.getSelectedIndex() == expenseCatCB.getItemCount()-1){
					category2 = inputPanelCat2_TF.getText();
					//check if new category is unique
					if (expenseCatMgr.checkExisting(category2))
						errorMsg += "Expense Category already exists.<br>" +
								"Please try a different name.<br>";
					if(category2.indexOf("|") >= 0)
						pipePresent = true;
				}
				else {
					category2 = (String) expenseCatCB.getSelectedItem();
				}
				
				description = inputPanelDescription_TF.getText();
				if(description.indexOf("|") >= 0)
					pipePresent = true;
				
				//check if pipes present
				if(pipePresent){
					errorMsg += "Pipe characters are not supported.<br>" +
							"So sorry about that!<br>";
				}
				
				//if any errors present, display errorMsg
				if (errorMsg != ""){
					errorMsg = "<html>" + errorMsg + "Please try again!" + "</html>";	//to wrap text
					inputPanelError_LBL.setText(errorMsg);
					errorMsg = "";
					pipePresent = false;
				}
				else {

					int id = 1 + entryMgr.getCurrentId();
					
					//update entryMgr
					entryMgr.addEntry(1, amount, date, category1, category2, description);
					
					//update assetCatmgr
					int assetType = assetTypeCB.getSelectedIndex();
					if (assetType == assetTypeCB.getItemCount()-1){
						assetCatMgr.addCategory(category1, amount);
					}
					else{						//note assets are reduced for this transaction type
						assetCatMgr.addAmountToCategory(assetTypeCB.getItemAt(assetType), -amount);
					}
					
					//update expenseCatMgr
					int expenseType = expenseCatCB.getSelectedIndex();
					if (expenseType == expenseCatCB.getItemCount()-1){
						expenseCatMgr.addCategory(category2, amount);
					}
					else{
						expenseCatMgr.addAmountToCategory(expenseCatCB.getItemAt(expenseType), amount);
					}
					
					//update historyMgr
					historyMgr.addLog(0, id, 1, amount, date, category1, category2, description);
					
					resetFields();
					
					hostFrame.dispose();
				}
			}
		});
		inputPanelInput_PNL.add(btnAddEntry, "cell 4 4");

	}
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType1.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType2.java
	 */

 *
 */
public class InputPanelType2 extends InputPanel {

	public InputPanelType2(final JFrame hostFrame, final LiabilityCatMgr liabilityCatMgr, final ExpenseCatMgr expenseCatMgr,
			final EntryMgr entryMgr, final HistoryMgr historyMgr) {
		
		super(hostFrame, entryMgr, historyMgr);
		setCatMgr(liabilityCatMgr, expenseCatMgr);
		
		inputPanelInput_PNL.setBackground(new Color(255, 200, 0));
		
		JLabel lblType = new JLabel("Liability Type");
		inputPanelInput_PNL.add(lblType, "cell 0 1,alignx left");
		
		//drop down menu for liability categories
		final JComboBox<String> liabilityTypeCB = new JComboBox<String>();
		for(String liabilityCat : liabilityCatMgr.getCategoryNameList())
			liabilityTypeCB.addItem(liabilityCat);
		liabilityTypeCB.addItem("New Category");
		inputPanelInput_PNL.add(liabilityTypeCB, "cell 1 1,growx");
		
		JLabel lblliabilityCategory = new JLabel("Expense Category");
		inputPanelInput_PNL.add(lblliabilityCategory, "cell 2 1,alignx left");
		
		//drop down menu for expense categories
		final JComboBox<String> expenseCatCB = new JComboBox<String>();
		for(String expenseCat : expenseCatMgr.getCategoryNameList())
			expenseCatCB.addItem(expenseCat);
		expenseCatCB.addItem("New Category");
		inputPanelInput_PNL.add(expenseCatCB, "cell 3 1,growx");
		
		JButton btnAddEntry = new JButton("Add Entry");
		btnAddEntry.addActionListener(new ActionListener() {
			
			//variables for storing user's inputs
			boolean pipePresent = false;
			int DD, MM, YYYY;
			double amount;
			String category1, category2, description;
			
			public void actionPerformed(ActionEvent e) {
				
				//check if amount is valid
				try{
					amount = Integer.parseInt(inputPanelAmount_TF.getText());
					if (amount < 0)
						throw new Exception();
				} catch (Exception exAmount){
					errorMsg += "Amount was not a valid number.<br>";
				}

				//Check if date is valid
				DD = Integer.parseInt(inputPanelDD_TF.getText());
				MM = Integer.parseInt(inputPanelMM_TF.getText());
				YYYY = Integer.parseInt(inputPanelYYYY_TF.getText());
				String formatString = "dd/MM/yyyy";
				String dateString = Integer.toString(DD) + "/" + Integer.toString(MM) + "/" + Integer.toString(YYYY);

				try {
					SimpleDateFormat format = new SimpleDateFormat(formatString);
					format.setLenient(false);
					format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Invalid date.<br>";
				} catch (IllegalArgumentException e2) {
					errorMsg += "Invalid date.<br>";
				}
					
				Date date = null;
				try {
					date = date_format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Unable to process date.<br>";
				}
				
				//check if date is before today
				Date today = new Date();
				if (today.before(date)){
					errorMsg += "Date given is in the future!.<br>";
				}
	
				//get liability category
				if (liabilityTypeCB.getSelectedIndex() == liabilityTypeCB.getItemCount()-1){
					category1 = inputPanelCat1_TF.getText();
					//check if new category is unique
					if (liabilityCatMgr.checkExisting(category1))
						errorMsg += "Liability Type already exists.<br>" +
								"Please try a different name.<br>";
					if(category1.indexOf("|") >= 0)
						pipePresent = true;
				}
				else {
					category1 = (String) liabilityTypeCB.getSelectedItem();
				}
				//get expense category
				if (expenseCatCB.getSelectedIndex() == expenseCatCB.getItemCount()-1){
					category2 = inputPanelCat2_TF.getText();
					//check if new category is unique
					if (expenseCatMgr.checkExisting(category2))
						errorMsg += "Expense Category already exists.<br>" +
								"Please try a different name.<br>";
					if(category2.indexOf("|") >= 0)
						pipePresent = true;
				}
				else {
					category2 = (String) expenseCatCB.getSelectedItem();
				}
				
				description = inputPanelDescription_TF.getText();
				if(description.indexOf("|") >= 0)
					pipePresent = true;
				
				//check if pipes present
				if(pipePresent){
					errorMsg += "Pipe characters are not supported.<br>" +
							"So sorry about that!<br>";
				}
				
				//if any errors present, display errorMsg
				if (errorMsg != ""){
					errorMsg = "<html>" + errorMsg + "Please try again!" + "</html>";	//to wrap text
					inputPanelError_LBL.setText(errorMsg);
					errorMsg = "";
					pipePresent = false;
				}
				else {
					
					int id = 1 + entryMgr.getCurrentId();
					
					//update entryMgr
					entryMgr.addEntry(2, amount, date, category1, category2, description);
					
					//update liabilityCatmgr
					int liabilityType = liabilityTypeCB.getSelectedIndex();
					if (liabilityType == liabilityTypeCB.getItemCount()-1){
						liabilityCatMgr.addCategory(category1, amount);
					}
					else{
						liabilityCatMgr.addAmountToCategory(liabilityTypeCB.getItemAt(liabilityType), amount);
					}
					
					//update expenseCatMgr
					int expenseType = expenseCatCB.getSelectedIndex();
					if (expenseType == expenseCatCB.getItemCount()-1){
						expenseCatMgr.addCategory(category2, amount);
					}
					else{
						expenseCatMgr.addAmountToCategory(expenseCatCB.getItemAt(expenseType), amount);
					}
					
					//update historyMgr
					historyMgr.addLog(0, id, 2, amount, date, category1, category2, description);

					resetFields();
					
					hostFrame.dispose();
				}
			}
		});
		inputPanelInput_PNL.add(btnAddEntry, "cell 4 4");

	}
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType2.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType3.java
	 */

 *
 */
public class InputPanelType3 extends InputPanel {

	public InputPanelType3(final JFrame hostFrame, final AssetCatMgr assetCatMgr, final LiabilityCatMgr liabilityCatMgr,
			final EntryMgr entryMgr, final HistoryMgr historyMgr) {
		
		super(hostFrame, entryMgr, historyMgr);
		setCatMgr(assetCatMgr, liabilityCatMgr);
		
		inputPanelInput_PNL.setBackground(new Color(255, 185, 215));
		
		JLabel lblType = new JLabel("Asset Type");
		inputPanelInput_PNL.add(lblType, "cell 0 1,alignx left");
		
		//drop down menu for asset categories
		final JComboBox<String> assetTypeCB = new JComboBox<String>();
		for(String assetCat : assetCatMgr.getCategoryNameList())
			assetTypeCB.addItem(assetCat);
		assetTypeCB.addItem("New Category");
		inputPanelInput_PNL.add(assetTypeCB, "cell 1 1,growx");
		
		JLabel lblLiabilityCategory = new JLabel("Liability Category");
		inputPanelInput_PNL.add(lblLiabilityCategory, "cell 2 1,alignx left");
		
		//drop down menu for liability categories
		final JComboBox<String> liabilityCatCB = new JComboBox<String>();
		for(String liabilityCat : liabilityCatMgr.getCategoryNameList())
			liabilityCatCB.addItem(liabilityCat);
		liabilityCatCB.addItem("New Category");
		inputPanelInput_PNL.add(liabilityCatCB, "cell 3 1,growx");
		
		JButton btnAddEntry = new JButton("Add Entry");
		btnAddEntry.addActionListener(new ActionListener() {
			
			//variables for storing user's inputs
			boolean pipePresent = false;
			int DD, MM, YYYY;
			double amount;
			String category1, category2, description;
			
			public void actionPerformed(ActionEvent e) {
				
				//check if amount is valid
				try{
					amount = Integer.parseInt(inputPanelAmount_TF.getText());
					if (amount < 0)
						throw new Exception();					
				} catch (Exception exAmount){
					errorMsg += "Amount was not a valid number.<br>";
				}

				//Check if date is valid
				DD = Integer.parseInt(inputPanelDD_TF.getText());
				MM = Integer.parseInt(inputPanelMM_TF.getText());
				YYYY = Integer.parseInt(inputPanelYYYY_TF.getText());
				String formatString = "dd/MM/yyyy";
				String dateString = Integer.toString(DD) + "/" + Integer.toString(MM) + "/" + Integer.toString(YYYY);

				try {
					SimpleDateFormat format = new SimpleDateFormat(formatString);
					format.setLenient(false);
					format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Invalid date.<br>";
				} catch (IllegalArgumentException e2) {
					errorMsg += "Invalid date.<br>";
				}
					
				Date date = null;
				try {
					date = date_format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Unable to process date.<br>";
				}
				
				//check if date is before today
				Date today = new Date();
				if (today.before(date)){
					errorMsg += "Date given is in the future!.<br>";
				}
	
				//get asset category
				if (assetTypeCB.getSelectedIndex() == assetTypeCB.getItemCount()-1){
					//cannot deduct from new category (illegal)
					errorMsg += "Cannot deduct from a new category.<br>" +
								"You may register an asset in the new category first or deduct from an existing category.<br>";
				}
				else {
					category1 = (String) assetTypeCB.getSelectedItem();
					//check if balance in category sufficient
					if(assetCatMgr.getAmount(category1) < amount){
						errorMsg += "Sorry, you do not have enough money in " + category1 + ".<br>" +
									"Please register an income in " + category1 + " or deduct from another category.<br>";
				}
				
				//get liability category
				if (liabilityCatCB.getSelectedIndex() == liabilityCatCB.getItemCount()-1){
					//cannot deduct from new category (illegal)
					errorMsg += "Cannot deduct from a new category.<br>" +
								"You may register a liability in the new category first or deduct from an existing category.<br>";
				}
				else {
					category2 = (String) liabilityCatCB.getSelectedItem();
				}
				
				description = inputPanelDescription_TF.getText();
				if(description.indexOf("|") >= 0)
					pipePresent = true;
				
				//check if pipes present
				if(pipePresent){
					errorMsg += "Pipe characters are not supported.<br>" +
							"So sorry about that!<br>";
				}
				
				//if any errors present, display errorMsg
				if (errorMsg != ""){
					errorMsg = "<html>" + errorMsg + "Please try again!" + "</html>";	//to wrap text
					inputPanelError_LBL.setText(errorMsg);
					errorMsg = "";
					pipePresent = false;
				}
				else {
					
					int id = 1 + entryMgr.getCurrentId();
					
					//update entryMgr
					entryMgr.addEntry(3, amount, date, category1, category2, description);
					
					//update assetCatmgr
					int assetType = assetTypeCB.getSelectedIndex();
					if (assetType == assetTypeCB.getItemCount()-1){
						assetCatMgr.addCategory(category1, amount);
					}
					else{
						assetCatMgr.addAmountToCategory(assetTypeCB.getItemAt(assetType), -amount);
					}
					
					//update liabilityCatMgr
					int liabilityType = liabilityCatCB.getSelectedIndex();
					if (liabilityType == liabilityCatCB.getItemCount()-1){
						liabilityCatMgr.addCategory(category2, amount);
					}
					else{
						liabilityCatMgr.addAmountToCategory(liabilityCatCB.getItemAt(liabilityType), -amount);
					}
					
					//update historyMgr
					historyMgr.addLog(0, id, 3, amount, date, category1, category2, description);

					resetFields();
					
					hostFrame.dispose();
					}
				}
			}
		});
		inputPanelInput_PNL.add(btnAddEntry, "cell 4 4");
	}
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType3.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType4.java
	 */

 *
 */
public class InputPanelType4 extends InputPanel {

	public InputPanelType4(final JFrame hostFrame, final AssetCatMgr assetCatMgr, final LiabilityCatMgr liabilityCatMgr,
			final EntryMgr entryMgr, final HistoryMgr historyMgr) {
		
		super(hostFrame, entryMgr, historyMgr);
		setCatMgr(assetCatMgr, liabilityCatMgr);
		
		inputPanelInput_PNL.setBackground(new Color(255, 185, 215));
		
		JLabel lblType = new JLabel("Asset Type");
		inputPanelInput_PNL.add(lblType, "cell 0 1,alignx left");
		
		//drop down menu for asset categories
		final JComboBox<String> assetTypeCB = new JComboBox<String>();
		for(String assetCat : assetCatMgr.getCategoryNameList())
			assetTypeCB.addItem(assetCat);
		assetTypeCB.addItem("New Category");
		inputPanelInput_PNL.add(assetTypeCB, "cell 1 1,growx");
		
		JLabel lblLiabilityCategory = new JLabel("Liability Category");
		inputPanelInput_PNL.add(lblLiabilityCategory, "cell 2 1,alignx left");
		
		//drop down menu for liability categories
		final JComboBox<String> liabilityCatCB = new JComboBox<String>();
		for(String liabilityCat : liabilityCatMgr.getCategoryNameList())
			liabilityCatCB.addItem(liabilityCat);
		liabilityCatCB.addItem("New Category");
		inputPanelInput_PNL.add(liabilityCatCB, "cell 3 1,growx");
		
		JButton btnAddEntry = new JButton("Add Entry");
		btnAddEntry.addActionListener(new ActionListener() {
			
			//variables for storing user's inputs
			boolean pipePresent = false;
			int DD, MM, YYYY;
			double amount;
			String category1, category2, description;
			
			public void actionPerformed(ActionEvent e) {
				
				//check if amount is valid
				try{
					amount = Integer.parseInt(inputPanelAmount_TF.getText());
					if (amount < 0)
						throw new Exception();					
				} catch (Exception exAmount){
					errorMsg += "Amount was not a valid number.<br>";
				}


				//Check if date is valid
				DD = Integer.parseInt(inputPanelDD_TF.getText());
				MM = Integer.parseInt(inputPanelMM_TF.getText());
				YYYY = Integer.parseInt(inputPanelYYYY_TF.getText());
				String formatString = "dd/MM/yyyy";
				String dateString = Integer.toString(DD) + "/" + Integer.toString(MM) + "/" + Integer.toString(YYYY);

				try {
					SimpleDateFormat format = new SimpleDateFormat(formatString);
					format.setLenient(false);
					format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Invalid date.<br>";
				} catch (IllegalArgumentException e2) {
					errorMsg += "Invalid date.<br>";
				}
					
				Date date = null;
				try {
					date = date_format.parse(dateString);
				} catch (ParseException e1) {
					errorMsg += "Unable to process date.<br>";
				}
				
				//check if date is before today
				Date today = new Date();
				if (today.before(date)){
					errorMsg += "Date given is in the future!.<br>";
				}
	
				//get asset category
				if (assetTypeCB.getSelectedIndex() == assetTypeCB.getItemCount()-1){
					category1 = inputPanelCat1_TF.getText();
					//check if new category is unique
					if (assetCatMgr.checkExisting(category1))
						errorMsg += "Asset Type already exists.<br>" +
								"Please try a different name.<br>";
					if(category1.indexOf("|") >= 0)
						pipePresent = true;
				}
				else {
					category1 = (String) assetTypeCB.getSelectedItem();
				}
				//get liability category
				if (liabilityCatCB.getSelectedIndex() == liabilityCatCB.getItemCount()-1){
					category2 = inputPanelCat2_TF.getText();
					//check if new category is unique
					if (liabilityCatMgr.checkExisting(category2))
						errorMsg += "Asset Type already exists.<br>" +
								"Please try a different name.<br>";
					if(category2.indexOf("|") >= 0)
						pipePresent = true;
				}
				else {
					category2 = (String) liabilityCatCB.getSelectedItem();
				}
				
				description = inputPanelDescription_TF.getText();
				if(description.indexOf("|") >= 0)
					pipePresent = true;
				
				//check if pipes present
				if(pipePresent){
					errorMsg += "Pipe characters are not supported.<br>" +
							"So sorry about that!<br>";
				}
				
				//if any errors present, display errorMsg
				if (errorMsg != ""){
					errorMsg = "<html>" + errorMsg + "Please try again!" + "</html>";	//to wrap text
					inputPanelError_LBL.setText(errorMsg);
					errorMsg = "";
					pipePresent = false;
				}
				else {
					
					int id = 1 + entryMgr.getCurrentId();
					
					//update entryMgr
					entryMgr.addEntry(4, amount, date, category1, category2, description);
					
					//update assetCatmgr
					int assetType = assetTypeCB.getSelectedIndex();
					if (assetType == assetTypeCB.getItemCount()-1){
						assetCatMgr.addCategory(category1, amount);
					}
					else{
						assetCatMgr.addAmountToCategory(assetTypeCB.getItemAt(assetType), amount);
					}
					
					//update liabilityCatMgr
					int liabilityType = liabilityCatCB.getSelectedIndex();
					if (liabilityType == liabilityCatCB.getItemCount()-1){
						liabilityCatMgr.addCategory(category2, amount);
					}
					else{
						liabilityCatMgr.addAmountToCategory(liabilityCatCB.getItemAt(liabilityType), amount);
					}
					
					//update historyMgr
					historyMgr.addLog(0, id, 4, amount, date, category1, category2, description);
					
					resetFields();
					
					hostFrame.dispose();
				}
			}
		});
		inputPanelInput_PNL.add(btnAddEntry, "cell 4 4");

	}
}

	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\InputPanelType4.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

 */
public class SearchMgr {
	
	private final static SimpleDateFormat date_format = new SimpleDateFormat("dd/MM/yyyy");	//private SimpleDateFormat variable to format the date while processing Entry information
	private static final DecimalFormat double_format = new DecimalFormat("##.00");			//private DecimalFormat variable to format double amounts of money
	private final static Font heading_font = new Font("Lucida Grande", Font.BOLD, 20);		//font for heading

	private JFrame frame;																	//Frame to hold the GUI elements
	private JTextField searchMgrDay_TF;														//Text field to specify day
	private JTextField searchMgrMonth_TF;													//Text field to specify month
	private JTextField searchMgrYear_TF;													//Text field to specify year
	private JLabel searchMgrHeading_LBL = new JLabel("Search");								//Label for heading
	private JLabel searchMgrDisplay_LBL = new JLabel("Please do a search selection");		//Label to display number of search results
	private JTable searchMgrResults_TABLE;													//Table to hold searched results
	private JButton searchMgrExport_BTN = new JButton("Export");							//Button used to export search results
	
	private boolean searched = false;
	private int DD, MM, YYYY;																//private day, month and year for processing of Entry information
	
	private EntryMgr entryMgr = new EntryMgr();												//Create an instance of EntryMgr
	private JTextField searchMgrDesc_TF;

	/**
	 * description: This function is to sort the search results by ascending ID
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortIDAscending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getId() > entryLL.get(j).getId()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by descending ID
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortIDDecending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getId() < entryLL.get(j).getId()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by ascending amount
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortAmtAscending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getAmount() > entryLL.get(j).getAmount()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by descending amount
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortAmtDecending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getAmount() < entryLL.get(j).getAmount()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by ascending date
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortDateAscending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getDate().after(entryLL.get(j).getDate())){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by descending date
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortDateDecending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getDate().before(entryLL.get(j).getDate())){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by ascending transaction type
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	static LinkedList<Entry> bubbleSortTransAscending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getTransactionType() > entryLL.get(j).getTransactionType()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}

	/**
	 * description: This function is to sort the search results by descending transaction type
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: entryLL
	 */
	public static LinkedList<Entry> bubbleSortTransDecending(LinkedList<Entry> entryLL) {
		for(int i=0; i<entryLL.size(); i++){
			for(int j=1; j<entryLL.size(); j++){
				if(entryLL.get(j-1).getTransactionType() < entryLL.get(j).getTransactionType()){
					Entry temp = entryLL.get(j);
					entryLL.set(j, entryLL.get(j-1));
					entryLL.set(j-1, temp);
				}
			}
		}
		
		return entryLL;
	}
	
	/**
	 * description: This function is to call the appropriate sort function depending on the search type
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: searchType
	 * @param: searched
	 */
	public static LinkedList<Entry> sortSearch(int searchType, LinkedList<Entry> searched){
		
		switch (searchType) {
		case 0:
			searched = bubbleSortIDAscending(searched);
			break;
			
		case 1:
			searched = bubbleSortIDDecending(searched);
			break;

		case 2:
			searched = bubbleSortAmtAscending(searched);
			break;

		case 3:
			searched = bubbleSortAmtDecending(searched);
			break;
			
		case 4:
			searched = bubbleSortDateAscending(searched);
			break;
			
		case 5:
			searched = bubbleSortDateDecending(searched);
			break;

		case 6:
			searched = bubbleSortTransAscending(searched);
			break;
			
		case 7:
			searched = bubbleSortTransDecending(searched);
			break;
		}
		return searched;
	}

	/**
	 * description: This function is to return a linked list of Entry results after searching by transaction type
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: transactionType
	 */
	public LinkedList<Entry> searchByTransactionType(int transactionType){
		LinkedList<Entry> allEntries = new LinkedList<Entry>();
		LinkedList<Entry> resultEntries = new LinkedList<Entry>();
		allEntries = entryMgr.getTransactionList();

		for (int i = 0; i < allEntries.size(); i++) {
			if(allEntries.get(i).getTransactionType() == transactionType){
				resultEntries.add(allEntries.get(i));
			}
		}
		searchMgrDisplay_LBL.setText(resultEntries.size() + " result(s) has been found");
		return resultEntries;
	}
	
	/**
	 * description: This function is to return a linked list of Entry results after searching by date
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: sign
	 * @param: inputDD
	 * @param: inputMM
	 * @param: inputYYYY
	 */
	public LinkedList<Entry> searchByDate(int sign, String inputDD, String inputMM, String inputYYYY){

		LinkedList<Entry> allEntries = new LinkedList<Entry>();
		LinkedList<Entry> resultEntries = new LinkedList<Entry>();
		String formatString = "dd/MM/yyyy";
		String dateString = inputDD + "/" + inputMM + "/" + inputYYYY;

		try {
			SimpleDateFormat format = new SimpleDateFormat(formatString);
			format.setLenient(false);
			format.parse(dateString);
		
		Date date = null;
		try {
			date = date_format.parse(dateString);
		} catch (Exception e1) {
			System.out.println(e1);
		}
		
		allEntries = entryMgr.getTransactionList();

		for (int i = 0; i < allEntries.size(); i++) {
			switch(sign){
			case 0:
				if(allEntries.get(i).getDate().before(date)){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 1:
				if(allEntries.get(i).getDate().after(date)){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 2:
				if(allEntries.get(i).getDate().equals(date)){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 3:
				if(allEntries.get(i).getDate().before(date) || allEntries.get(i).getDate().equals(date)){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 4:
				if(allEntries.get(i).getDate().after(date) || allEntries.get(i).getDate().equals(date)){
					resultEntries.add(allEntries.get(i));
				}
				break;
			}
		}

		searchMgrDisplay_LBL.setText(resultEntries.size() + " result(s) has been found");
		} catch (ParseException e1) {
			JOptionPane.showMessageDialog(frame, "Invalid Date");
		} catch (IllegalArgumentException e2) {
			JOptionPane.showMessageDialog(frame, "Invalid Date");
		}
		return resultEntries;
	}
	
	/**
	 * description: This function is to return a linked list of Entry results after searching by amount
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: sign
	 * @param: amount
	 */
	public LinkedList<Entry> searchByAmount(int sign, Double amount){
		LinkedList<Entry> allEntries = new LinkedList<Entry>();
		LinkedList<Entry> resultEntries = new LinkedList<Entry>();
		allEntries = entryMgr.getTransactionList(); 
		
		for (int i = 0; i < allEntries.size(); i++) {
			switch(sign){
			case 0:
				if(allEntries.get(i).getAmount() > amount){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 1:
				if(allEntries.get(i).getAmount() < amount){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 2:
				if(allEntries.get(i).getAmount() == amount){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 3:
				if(allEntries.get(i).getAmount() >= amount){
					resultEntries.add(allEntries.get(i));
				}
				break;
			case 4:
				if(allEntries.get(i).getAmount() <= amount){
					resultEntries.add(allEntries.get(i));
				}
				break;
			}
		}

		searchMgrDisplay_LBL.setText(resultEntries.size() + " result(s) has been found");

		return resultEntries;
		}
	
	/**
	 * description: This function is to return a linked list of Entry results after searching by description
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

	 * @param: description
	 */
	public LinkedList<Entry> searchByDescription(String description){
		LinkedList<Entry> allEntries = new LinkedList<Entry>();
		LinkedList<Entry> resultEntries = new LinkedList<Entry>();
		allEntries = entryMgr.getTransactionList();

		StringTokenizer st = new StringTokenizer(description, " ");
		String keyword;
		String concat = "";

		if (description != "") {

			for (int i = 0; i < allEntries.size(); i++) {
				st = new StringTokenizer(description, " ");
				concat = "";
				concat += allEntries.get(i).getAmount() + " ";
				concat += allEntries.get(i).getId() + " ";
				concat += allEntries.get(i).getCategory1() + " ";
				concat += allEntries.get(i).getCategory2() + " ";
				concat += allEntries.get(i).getDescription() + " ";
				concat += allEntries.get(i).getDate() + " ";
				concat += allEntries.get(i).getTransactionType();

				System.out.println(concat);
				concat.toUpperCase();
				
				while (st.hasMoreTokens()) {
					keyword = st.nextToken().toUpperCase();

					System.out.println("keyword is " + keyword);
					if(concat.contains(keyword)){
						resultEntries.add(allEntries.get(i));
						break;
					}
				}
			}
		}

		searchMgrDisplay_LBL.setText(resultEntries.size() + " result(s) has been found");

		return resultEntries;
		}

	/**
	 * Default Constructor
	 * @param finances_FRM
	 */
	public SearchMgr(final Finances finances){
		
		//disable main frame to prevent generation of more than 1 pop up frame
		finances.disableFrame();
		
		frame = new JFrame();
		frame.setVisible(true);
		frame.setBounds(100, 100, 800, 500);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		final JScrollPane searchMgr_SCP = new JScrollPane();				//ScrollPane to enable scrolling in window
		frame.getContentPane().add(searchMgr_SCP);
		
		final JPanel searchMgr_PNL = new JPanel(new MigLayout("", "[50px:n:50px][50:n:100][100px:n:100px][100px:n:100px,grow][100px:n:100px][grow][grow]", "[][][15px:n:15px][15px:n:15px][][15px:n:15px][15px:n:15px][][15px:n:15px][15px:n:15px][][][][][grow][grow]"));
		searchMgr_PNL.setBackground(Color.white);
		searchMgr_SCP.setViewportView(searchMgr_PNL);
		
		JRadioButton searchMgrSelectionDesc_RDBTN = new JRadioButton("");
		searchMgr_PNL.add(searchMgrSelectionDesc_RDBTN, "cell 0 1");
		searchMgrSelectionDesc_RDBTN.setMnemonic(3);
		
		searchMgrDesc_TF = new JTextField();
		searchMgr_PNL.add(searchMgrDesc_TF, "cell 3 1 2 1,growx");
		searchMgrDesc_TF.setColumns(10);
		
		JLabel searchMgrDesc_LBL = new JLabel("Description");
		searchMgr_PNL.add(searchMgrDesc_LBL, "cell 3 2,alignx center");
		
		
		final JScrollPane searchMgrScPane_SCP = new JScrollPane();					//ScrollPane to put the results Panel into it and to display results
		searchMgr_PNL.add(searchMgrScPane_SCP, "cell 0 14 7 2,grow");

		searchMgrResults_TABLE = new JTable();										//Table to display search results
		searchMgrScPane_SCP.setViewportView(searchMgrResults_TABLE);
		
		
		searchMgr_PNL.add(searchMgrDisplay_LBL, "cell 2 13 3 1");
		
		searchMgrHeading_LBL.setText("Search");
		searchMgrHeading_LBL.setFont(heading_font);
		searchMgrHeading_LBL.setIcon(new ImageIcon(Finances.class.getResource("/img/Search.png")));
		searchMgr_PNL.add(searchMgrHeading_LBL, "cell 0 0, alignx center");
		
		JRadioButton searchMgrSelectionAmount_RDBTN = new JRadioButton("");			//Radio button to specify search by amount
		searchMgr_PNL.add(searchMgrSelectionAmount_RDBTN, "cell 0 4");
		searchMgrSelectionAmount_RDBTN.setMnemonic(0);
		
		final JComboBox<String> searchMgrAmount_CB = new JComboBox<String>();		//Combo box to specify search by amount sign
		searchMgr_PNL.add(searchMgrAmount_CB, "cell 1 4 2 1");
		searchMgrAmount_CB.addItem("Greater than");
		searchMgrAmount_CB.addItem("Lesser than");
		searchMgrAmount_CB.addItem("Equal");
		searchMgrAmount_CB.addItem("Greater-Equal");
		searchMgrAmount_CB.addItem("Lesser-Equal");
		
		final JTextField searchMgrAmout_TF = new JTextField();						//Text field to specify amount
		searchMgr_PNL.add(searchMgrAmout_TF, "cell 3 4,growx");
		searchMgrAmout_TF.setColumns(10);
		
		JLabel searchMgrAmount_LBL = new JLabel("Amount");							//Label to specify amount
		searchMgr_PNL.add(searchMgrAmount_LBL, "cell 3 5,alignx center");
		
		JRadioButton searchMgrSelectionDate_RDBTN = new JRadioButton("");			//Radio button to specify search by date
		searchMgr_PNL.add(searchMgrSelectionDate_RDBTN, "cell 0 7");
		searchMgrSelectionDate_RDBTN.setMnemonic(1);
		
		final JComboBox<String> searchMgrDate_CB = new JComboBox<String>();			//Combo box to select the type of sign for date
		searchMgr_PNL.add(searchMgrDate_CB, "cell 1 7 2 1");
		searchMgrDate_CB.addItem("Before");
		searchMgrDate_CB.addItem("After");
		searchMgrDate_CB.addItem("Specific");
		searchMgrDate_CB.addItem("Bef-Include");
		searchMgrDate_CB.addItem("Aft-Include");
		
		
		searchMgrDay_TF = new JTextField();											//Text field to specify the day
		searchMgr_PNL.add(searchMgrDay_TF, "flowx,cell 3 7,alignx center");
		searchMgrDay_TF.setColumns(10);
		
		searchMgrMonth_TF = new JTextField();										//Text field to specify the month
		searchMgr_PNL.add(searchMgrMonth_TF, "cell 4 7,alignx center");
		searchMgrMonth_TF.setColumns(10);
		
		searchMgrYear_TF = new JTextField();										//Text field to specify the year
		searchMgr_PNL.add(searchMgrYear_TF, "cell 5 7,alignx center");
		searchMgrYear_TF.setColumns(10);
		
		JLabel searchMgrDay_LBL = new JLabel("DD");									//Label to specify the day
		searchMgr_PNL.add(searchMgrDay_LBL, "cell 3 8,alignx center");
		
		JLabel searchMgrMonth_LBL = new JLabel("MM");								//Label to specify the month
		searchMgr_PNL.add(searchMgrMonth_LBL, "cell 4 8,alignx center");
		
		JLabel searchMgrYear_LBL = new JLabel("YYYY");								//Label to specify the year
		searchMgr_PNL.add(searchMgrYear_LBL, "cell 5 8,alignx center");
		
		JRadioButton searchMgrSelectionType_RDBTN = new JRadioButton("");			//Radio button for selection type
		searchMgr_PNL.add(searchMgrSelectionType_RDBTN, "cell 0 10");
		searchMgrSelectionType_RDBTN.setMnemonic(2);
		
		final ButtonGroup searchMgrBtnGroup = new ButtonGroup();					//Radio button to specify the selection of search function
		searchMgrBtnGroup.add(searchMgrSelectionAmount_RDBTN);
		searchMgrBtnGroup.add(searchMgrSelectionDate_RDBTN);
		searchMgrBtnGroup.add(searchMgrSelectionType_RDBTN);
		searchMgrBtnGroup.add(searchMgrSelectionDesc_RDBTN);
		searchMgrSelectionAmount_RDBTN.setSelected(true);
		
		
		JLabel searchMgrType_LBL = new JLabel("Transaction Type");					//Label to specify the transaction type
		searchMgr_PNL.add(searchMgrType_LBL, "cell 1 10 2 1,alignx left");
		
		final JComboBox<String> searchMgrType_CB = new JComboBox<String>();			//Combo box for selecting the type of transaction type
		searchMgr_PNL.add(searchMgrType_CB, "cell 3 10 2 1,growx");
		searchMgrType_CB.addItem("Income Received");
		searchMgrType_CB.addItem("Expense by Assets");
		searchMgrType_CB.addItem("Expense by Credit");
		searchMgrType_CB.addItem("Repaying Loan");
		searchMgrType_CB.addItem("Take Loan");
		searchMgrType_CB.addItem("Transfer of Assets");
		searchMgrType_CB.addItem("Transfer of Liabilities");
		
		JButton searchMgrSearchNow_BTN = new JButton("Search Now");					//Button to search for Entries
		searchMgr_PNL.add(searchMgrSearchNow_BTN, "cell 5 13,alignx center");
		
		final JComboBox searchMgrSort_CB = new JComboBox();
		searchMgr_PNL.add(searchMgrSort_CB, "cell 4 13");
		searchMgrSort_CB.addItem("ID Asc");
		searchMgrSort_CB.addItem("ID Desc");
		searchMgrSort_CB.addItem("Amt Asc");
		searchMgrSort_CB.addItem("Amt Desc");
		searchMgrSort_CB.addItem("Date Asc");
		searchMgrSort_CB.addItem("Date Desc");
		searchMgrSort_CB.addItem("Type Asc");
		searchMgrSort_CB.addItem("Type Desc");
		/**
		 * description: Function is to listen for the Search Now button to be clicked and do the appropriate search
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





	/**
	 * origin: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java
	 */

		 */
		searchMgrSearchNow_BTN.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				
				LinkedList<Entry> searchedResults = new LinkedList<Entry>();

				switch (searchMgrBtnGroup.getSelection().getMnemonic()) {
				case 0:
					searchedResults = new LinkedList<Entry>();
					try{
					searchedResults = searchByAmount(searchMgrAmount_CB.getSelectedIndex(), Double.parseDouble(searchMgrAmout_TF.getText()));
					
					searchedResults = sortSearch(searchMgrSort_CB.getSelectedIndex(), searchedResults);
					}
					catch(Exception e){
						System.out.println("Invalid amount");

						JOptionPane.showMessageDialog(frame, "Invalid amount");
					}
					break;
				case 1:
					searchedResults = new LinkedList<Entry>();
					searchedResults = searchByDate(searchMgrDate_CB.getSelectedIndex(), searchMgrDay_TF.getText(), searchMgrMonth_TF.getText(), searchMgrYear_TF.getText());

					searchedResults = sortSearch(searchMgrSort_CB.getSelectedIndex(), searchedResults);
					break;
				case 2:
					searchedResults = new LinkedList<Entry>();
					searchedResults = searchByTransactionType(searchMgrType_CB.getSelectedIndex());

					searchedResults = sortSearch(searchMgrSort_CB.getSelectedIndex(), searchedResults);
					break;
				case 3:
					searchedResults = new LinkedList<Entry>();
					searchedResults = searchByDescription(searchMgrDesc_TF.getText());

					searchedResults = sortSearch(searchMgrSort_CB.getSelectedIndex(), searchedResults);
					break;
				}
				
				DefaultTableModel model;

				String data[][] = new String[searchedResults.size()][7];
				
				//Setup the search results into data[][]
				for(int i=0; i<searchedResults.size(); i++){
					
					data[i][0] = searchedResults.get(i).getId() +"";
					
					switch(searchedResults.get(i).getTransactionType()){
					
					case 0:	data[i][1] = "Income Received";
							break;
					case 1:	data[i][1] = "Expense Using Assets";
							break;
					case 2:	data[i][1] = "Expense Using Liabilities";
							break;
					case 3:	data[i][1] = "Repay Loan";
							break;
					case 4:	data[i][1] = "Take Loan";
							break;
					case 5:	data[i][1] = "Intra-Asset Transfer";
							break;
					case 6:	data[i][1] = "Intra-Liability Transfer";
							break;
					}
					
					data[i][2] = double_format.format(searchedResults.get(i).getAmount());
					data[i][3] = date_format.format(searchedResults.get(i).getDate());
					data[i][4] = searchedResults.get(i).getCategory1();
					data[i][5] = searchedResults.get(i).getCategory2();
					data[i][6] = searchedResults.get(i).getDescription();
				}

				//Setup the column names for table
				String col[] = { "ID", "Transaction Type", "Amount", "Date", "Category 1", "Category 2", "Description" };

				model = new DefaultTableModel(data, col);
				searchMgrResults_TABLE = new JTable(model);
				searchMgrResults_TABLE.enable(false);
				searchMgrResults_TABLE.setLayout(new MigLayout("","[20][20][160][100][100][100][grow]","[]"));
				
				searchMgrResults_TABLE.revalidate();
				searchMgrScPane_SCP.setViewportView(searchMgrResults_TABLE);
				
				searched = true;
				searchMgrExport_BTN.setVisible(true);
				searchMgr_PNL.add(searchMgrExport_BTN, "cell 6 10");
			}
		});
		
		searchMgrExport_BTN.setIcon(new ImageIcon(Finances.class.getResource("/img/Export.png")));
		if(searched){
			searchMgrExport_BTN.setVisible(true);
			searchMgr_PNL.add(searchMgrExport_BTN, "cell 6 10");
		}
		
		searchMgrExport_BTN.addActionListener(new ActionListener(){
			/**
			 * description: button outputs search results to a xls file
	// End of segment: C:\Users\Joshua\workspace\CS2103-T13-4J\src\Latest Files\SearchMgr.java





